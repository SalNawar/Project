from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
import random
import matplotlib.pyplot as plt
import numpy as np
from functionClass import function
from pathlib import Path
from plot3D import plot3D

#variables
#NFC, MAX_NFC, NP, Xa, Xb, Xc, CR, F, D,

#f1 :   High Conditioned Elliptic Function
#f2 :   Bent cigar Function
#f3 :   Discus Function
#f4 :   Rosenbrock's Function
#f5 :   Ackley's Function
#f6 :   Weierstrass Function
#f7 :   Griewank's Function
#f8 :   Rastrigin's Function
#f9 :   Katsuura Function

NP = 100
Cr = 0.9
F = 0.8

# D = 10, 30, 50
#D = 10
# Setup random population
# Target Vector
def de(functionNumber,run,D):
    filePath = "../output/" + str(D) + "_" + str(functionNumber) + "_DE.csv"
    if not Path(filePath).is_file():
        file = open(filePath, 'w')
        file.close()
    fnc = function(filePath,functionNumber,run )
    X = 200 * np.random.random_sample(D,) - 100
    Xv = fnc.fn(X)
    bestNFC = 1

    file = open(filePath, 'a')
    file.write(str(bestNFC) + ',' + str(Xv) + ',')
    for i in X:
        file.write(str(i) + ',')
    file.write("\n")
    file.close()
    for i in range(0,NP):
        # Two Random vectors
        Xa = 200 * np.random.random_sample(D,) - 100
        Xb = 200 * np.random.random_sample(D,) - 100
        # Third Random vector for mutation
        Xc = 200 * np.random.random_sample(D,) - 100
        while np.array_equal(X,Xa):
            Xa = 200 * np.random.random_sample(D,) - 100
        while np.array_equal(Xb, X) or np.array_equal(Xb, Xa):
            Xb = 200 * np.random.random_sample(D,) - 100
        while np.array_equal(Xc,X) or np.array_equal(Xc,Xa) \
                or np.array_equal(Xc,Xb):
            Xc = 200 * np.random.random_sample(D,) - 100
        ###################################################
        # Mutation
        #noisy vector
        V = (F * (Xb - Xa)) + Xc
        ###################################################
        # Crossover
        U = np.empty(D,)
        for i in range(0,D):
            x=np.random.random()
            if (x < Cr):
                U[i]=V[i]
            else:
                U[i]=X[i]
        ####################################################
        # Selection
        Uv = fnc.fn(U)
        if (Uv<Xv):
            X = U
            Xv = Uv
            bestNFC = fnc.get_NFC()
        file = open(filePath, 'a')
        file.write(str(bestNFC) + ',' + str(Xv) + ',')
        for i in X:
            file.write(str(i) + ',')
        file.write("\n")
        file.close()
        #print(Xv)

    print("Best Variable Vector:\n", X)
    print("Best Solution: ", Xv)
